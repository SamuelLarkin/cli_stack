version: "3"

env:
  BASH_COMPLETION_D: "{{.HOME}}/.local/share/bash-completion/completions"
  BIN_DIR: "{{.HOME}}/.local/bin"
  INSTALL_DIR: "{{.HOME}}/.local"

tasks:
  default:
    deps:
      - install_plugins
      - plugin_manager
      - shell_completion

  install_plugins:
    desc: >
      Install tmux's plugins.
    cmd: "{{.HOME}}/.tmux/plugins/tpm/bin/install_plugins"
    deps:
      - plugin_manager

  plugin_manager:
    desc: >
      Install tmux's plugin manager.
    cmd: |
      git \
         clone \
         https://github.com/tmux-plugins/tpm \
         {{.HOME}}/.tmux/plugins/tpm \
      || ( cd {{.HOME}}/.tmux/plugins/tpm && git pull; )

  shell_completion:
    desc: >
      Install tmux shell completion.
    cmd: |
      curl \
         --create-dirs --fail --location \
         --output {{.BASH_COMPLETION_D}}/'#1' \
         'https://raw.githubusercontent.com/imomaliev/tmux-bash-completion/master/completions/{tmux}'

  libevent:
    desc: >
      [libevent](https://libevent.org/):
      The libevent API provides a mechanism to execute a callback function when
      a specific event occurs on a file descriptor or after a timeout has been
      reached. Furthermore, libevent also support callbacks due to signals or
      regular timeouts.
    cmds:
      - |
        curl \
          --create-dirs --fail --location \
          --output "libevent-$VERSION.tar.gz" \
          "https://github.com/libevent/libevent/releases/download/release-$VERSION/libevent-$VERSION.tar.gz"
      - defer: rm "libevent-$VERSION.tar.gz"
      - tar xf libevent-$VERSION.tar.gz
      - defer: rm -fr libevent-$VERSION
      - |
        cd libevent-$VERSION
        ./configure --prefix="{{.INSTALL_DIR}}" --enable-shared
        \make -j $(nproc) install
    dir: "{{.HOME}}/tmp"
    env:
      VERSION: 2.1.12-stable
    preconditions:
      - msg: "make must be in your $PATH"
        sh: which make

  ncurses:
    desc: >
      [ncurses](https://libevent.org/):
    cmds:
      - |
        curl \
          --create-dirs --fail --location \
          --output "ncurses-$VERSION.tar.gz" \
          "https://ftp.gnu.org/gnu/ncurses/ncurses-$VERSION.tar.gz"
      - defer: rm "ncurses-$VERSION.tar.gz"
      - tar xf ncurses-$VERSION.tar.gz
      - defer: rm -fr ncurses-$VERSION
      - |
        cd ncurses-$VERSION
        ./configure --prefix="{{.INSTALL_DIR}}" --with-shared --with-termlib --enable-pc-files --with-pkg-config-libdir={{.INSTALL_DIR}}/lib/pkgconfig
        \make -j $(nproc) install
    dir: "{{.HOME}}/tmp"
    env:
      VERSION: 6.5
    preconditions:
      - msg: "make must be in your $PATH"
        sh: which make

  tmux:
    desc: >
      [tmux](https://github.com/tmux/tmux):
      A terminal multiplexer.
    cmds:
      - |
        curl \
          --create-dirs --fail --location \
          --output "tmux-$VERSION.tar.gz" \
          "https://github.com/tmux/tmux/releases/download/$VERSION/tmux-$VERSION.tar.gz"
      - defer: rm "tmux-$VERSION.tar.gz"
      - tar xf tmux-$VERSION.tar.gz
      - defer: rm -fr tmux-$VERSION
      - |
        cd tmux-$VERSION
        PKG_CONFIG_PATH={{.INSTALL_DIR}}/lib/pkgconfig ./configure --prefix="{{.INSTALL_DIR}}" --enable-static
        \make -j $(nproc) install
    deps: [libevent, ncurses]
    dir: "{{.HOME}}/tmp"
    env:
      VERSION: 3.5a
    generates:
      - "{{.BIN_DIR}}/tmux"
    status:
      - which tmux
    preconditions:
      - msg: "make must be in your $PATH"
        sh: which make
      - msg: "yacc must be in your $PATH"
        sh: which yacc
